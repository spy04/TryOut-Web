# Generated by Django 4.2.7 on 2025-10-06 04:47

import api.models
import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', api.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CountdownUTBK',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateUTBK', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('poster', models.ImageField(upload_to='poster/')),
                ('photo', models.ImageField(upload_to='photo_event')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('time', models.IntegerField()),
                ('tempat', models.CharField(max_length=255)),
                ('syarat', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Latihan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_latihan', models.CharField(max_length=255)),
                ('created_at_latihan', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LatihanSoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_latihan', models.TextField()),
                ('image_latihan', models.ImageField(blank=True, null=True, upload_to='question_images/')),
                ('option_a_latihan', models.CharField(blank=True, max_length=255, null=True)),
                ('option_a_image_latihan', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_b_latihan', models.CharField(blank=True, max_length=255, null=True)),
                ('option_b_image_latihan', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_c_latihan', models.CharField(blank=True, max_length=255, null=True)),
                ('option_c_image_latihan', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_d_latihan', models.CharField(blank=True, max_length=255, null=True)),
                ('option_d_image_latihan', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_e_latihan', models.CharField(blank=True, max_length=255, null=True)),
                ('option_e_image_latihan', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('answer_latihan', models.CharField(max_length=1)),
                ('explanation_latihan', models.TextField(blank=True, null=True)),
                ('explanation_image_latihan', models.ImageField(blank=True, null=True, upload_to='explanation_images/')),
                ('created_at_latihan', models.DateTimeField(auto_now_add=True)),
                ('latsol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='latsol', to='api.latihan')),
            ],
        ),
        migrations.CreateModel(
            name='PracticeTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_practice', models.CharField(max_length=255)),
                ('created_at_practice', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nama', models.CharField(max_length=100)),
                ('isi', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('harga', models.IntegerField(blank=True, null=True)),
                ('harga_bulan', models.IntegerField(blank=True, null=True)),
                ('duration_days', models.IntegerField(default=30)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tryout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('duration', models.PositiveIntegerField(default=160)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.CharField(max_length=100, unique=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('settlement', 'Settlement'), ('deny', 'Deny'), ('expire', 'Expire'), ('cancel', 'Cancel')], default='pending', max_length=20)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='api.subscription')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TotalRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.IntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='total_rank', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-total_score'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='question_images/')),
                ('option_a', models.CharField(blank=True, max_length=255, null=True)),
                ('option_a_image', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_b', models.CharField(blank=True, max_length=255, null=True)),
                ('option_b_image', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_c', models.CharField(blank=True, max_length=255, null=True)),
                ('option_c_image', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_d', models.CharField(blank=True, max_length=255, null=True)),
                ('option_d_image', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('option_e', models.CharField(blank=True, max_length=255, null=True)),
                ('option_e_image', models.ImageField(blank=True, null=True, upload_to='option_images/')),
                ('answer', models.CharField(max_length=1)),
                ('explanation', models.TextField(blank=True, null=True)),
                ('explanation_image', models.ImageField(blank=True, null=True, upload_to='explanation_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tryout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.tryout')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('asal_sekolah', models.CharField(blank=True, max_length=255, null=True)),
                ('Jurusan', models.CharField(blank=True, max_length=255, null=True)),
                ('tahun_lulus', models.DateField(blank=True, null=True)),
                ('is_pro', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Materi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('judul_materi', models.CharField(max_length=200)),
                ('slug_materi', models.SlugField(blank=True, unique=True)),
                ('konten_materi', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True)),
                ('image_materi', models.ImageField(blank=True, null=True, upload_to='materi_image/')),
                ('created_at_materi', models.DateTimeField(auto_now_add=True)),
                ('updated_at_materi', models.DateTimeField(auto_now=True)),
                ('practicetest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materi', to='api.practicetest')),
            ],
        ),
        migrations.AddField(
            model_name='latihan',
            name='latihan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='latihan', to='api.materi'),
        ),
        migrations.CreateModel(
            name='EmailOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.IntegerField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('photo_promo', models.ImageField(blank=True, null=True, upload_to='promo/')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='api.subscription')),
            ],
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_option', models.CharField(max_length=1)),
                ('is_correct', models.BooleanField(null=True)),
                ('answered_at', models.DateTimeField(auto_now=True)),
                ('submitted', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'question')},
            },
        ),
        migrations.CreateModel(
            name='TryoutSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished', models.BooleanField(default=False)),
                ('tryout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.tryout')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'tryout')},
            },
        ),
        migrations.CreateModel(
            name='TryoutRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tryout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranks', to='api.tryout')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score'],
                'unique_together': {('user', 'tryout')},
            },
        ),
        migrations.CreateModel(
            name='LatihanUserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_option_latihan_soal', models.CharField(max_length=1)),
                ('is_correct_latihan_soal', models.BooleanField(null=True)),
                ('answered_at_latihan_soal', models.DateTimeField(auto_now=True)),
                ('submitted_latihan_soal', models.BooleanField(default=False)),
                ('question_latihan_soal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.latihansoal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'question_latihan_soal')},
            },
        ),
    ]
